{"version":3,"file":"management.min.js","sources":["../src/management.js"],"sourcesContent":["import Modal from 'core/modal';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException, deleteCancelPromise} from 'core/notification';\nimport {call as fetchMany} from 'core/ajax';\n\nclass PreviewModal extends Modal {\n    static TYPE = \"tiny_c4l/management_preview\";\n    static TEMPLATE = \"tiny_c4l/management_preview\";\n    configure(modalConfig) {\n        modalConfig.removeOnClose = true;\n        modalConfig.large = true;\n        super.configure(modalConfig);\n    }\n}\n\nexport const init = async(params) => {\n\n    // Add listener to import xml files.\n    let importxml = document.getElementById('c4l_import');\n    importxml.addEventListener('click', async(e) => {\n        importModal(e);\n    });\n\n    // Add listener for adding a new item.\n    let additem = document.getElementsByClassName('add');\n    additem.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to edit items.\n    let edititems = document.getElementsByClassName('edit');\n    edititems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to delete items.\n    let deleteitems = document.getElementsByClassName('delete');\n    deleteitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            deleteModal(e, element.dataset.id, element.dataset.title, element.dataset.table);\n        });\n    });\n\n    // Add listener to preview items.\n    let previewitems = document.getElementsByClassName('preview');\n    previewitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            previewModal(e);\n        });\n    });\n\n    // Add listener to select compcat to show corresponding items.\n    let compcats = document.getElementsByClassName('compcat');\n    compcats.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showItems(e, element.dataset.compcat);\n        });\n    });\n\n    // Add listener to manage component flavor relation.\n    let compflavor = document.getElementById('c4l_compflavor_button');\n    compflavor.addEventListener('click', async(e) => {\n        compflavorModal(e);\n    });\n\n    // Add image and text to item setting click area.\n    let enlargeItems = document.querySelectorAll(\n        '.flavor .card-body > .clickingextended, .component .card-body > .clickingextended, .variant .card-body > .clickingextended'\n    );\n    enlargeItems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            let item = e.target.closest('.item');\n            item.querySelector('a.edit').click();\n        });\n    });\n\n    // After submitting a new item, reset active compcat.\n    if (params.compcatactive) {\n        let compcat = document.querySelector('.compcat[data-compcat=\"' + params.compcatactive + '\"]');\n        if (compcat) {\n            showItems(false, params.compcatactive);\n            compcat.classList.add('active');\n        }\n    }\n};\n\n/**\n * Show dynamic form to add/edit a source.\n * @param {*} e\n * @param {*} id\n * @param {*} table\n */\nfunction showModal(e, id, table) {\n    e.preventDefault();\n    let title;\n    if (id == 0) {\n        title = getString('additem', 'tiny_c4l');\n    } else {\n        title = getString('edititem', 'tiny_c4l');\n    }\n\n    const modalForm = new ModalForm({\n        // Set formclass, depending on component.\n        formClass: \"tiny_c4l\\\\form\\\\management_\" + table + \"_form\",\n        args: {\n            id: id,\n        },\n        modalConfig: { title: title },\n    });\n    // Conditional reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => reloadIfNew(modalForm.getFormNode()));\n\n    modalForm.show();\n}\n\n/**\n * Show modal to preview css version.\n * @param {*} e\n */\nasync function previewModal(e) {\n    e.preventDefault();\n    let preview = e.target.closest(\".preview\");\n    const modal = await PreviewModal.create({\n        templateContext: {\n            component: preview.dataset.component,\n            flavors: preview.dataset.flavors.trim().split(\" \"),\n        },\n    });\n    modal.show();\n}\n\n/**\n * Show dynamic form to import xml backups.\n * @param {*} e\n */\nfunction importModal(e) {\n    e.preventDefault();\n    let title = getString('import', 'tiny_c4l');\n\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_c4l\\\\form\\\\management_import_form\",\n        args: {},\n        modalConfig: { title: title },\n    });\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    modalForm.show();\n}\n\n/**\n * Load modal to edit icon urls.\n * @param {*} e\n */\nfunction compflavorModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_c4l');\n\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_c4l\\\\form\\\\management_comp_flavor_form\",\n        args: {},\n        modalConfig: { title: title },\n    });\n\n    modalForm.show();\n}\n\n/**\n * Show dynamic form to delete a source.\n * @param {*} e\n * @param {*} id\n * @param {*} title\n * @param {*} table\n */\nfunction deleteModal(e, id, title, table) {\n    e.preventDefault();\n\n    deleteCancelPromise(\n        getString('delete', 'tiny_c4l', title),\n        getString('deletewarning', 'tiny_c4l'),\n    ).then(async () => {\n        if (id !== 0) {\n            try {\n                const deleted = await deleteItem(id, table);\n                if (deleted) {\n                    const link = document.querySelector('[data-table=\"' + table + '\"][data-id=\"' + id + '\"]');\n                    if (link) {\n                        const card = link.closest(\".item\");\n                        card.remove();\n                    }\n                }\n            } catch (error) {\n                displayException(error);\n            }\n        }\n        return;\n    }).catch(() => {\n        return;\n    });\n}\n\n/**\n * Delete c4l items.\n * @param {*} id\n * @param {*} table\n * @returns {mixed}\n */\nexport const deleteItem = (\n    id,\n    table,\n) => fetchMany(\n    [{\n        methodname: 'tiny_c4l_delete_item',\n        args: {\n            id,\n            table,\n        }\n    }])[0];\n\n/**\n * Show items after clicking a compcat.\n * @param {*} e\n * @param {*} compcat\n */\nfunction showItems(e, compcat) {\n    // But first hide all items.\n    let itemsHide = document.querySelectorAll('.flavor, .component, .variant');\n    itemsHide.forEach(element => {\n        element.classList.add('hidden');\n    });\n\n    // Show component and variants with compcat name and read the flavors.\n    let itemsShow = document.getElementsByClassName(compcat);\n    let usedFlavors = [];\n    itemsShow.forEach(element => {\n        element.classList.remove('hidden');\n        // Get all flavors to show if on compcat element.\n        if (typeof element.dataset.flavors !== 'undefined') {\n            let flavors = element.dataset.flavors.split(' ');\n            for (let value of flavors) {\n                if (!usedFlavors.includes(value) && value.length != 0) {\n                    usedFlavors.push(value);\n                }\n            }\n        }\n    });\n\n    // Show the flavors.\n    let flavorstring = usedFlavors.map(item => `.${item}`).join(', ');\n    if (flavorstring.length) {\n        let flavorsShow = document.querySelectorAll(flavorstring);\n        flavorsShow.forEach(element => {\n            element.classList.remove('hidden');\n        });\n    }\n\n    // Show add buttons.\n    let addsShow = document.getElementsByClassName('addcontainer');\n    addsShow.forEach(element => {\n        element.classList.remove('hidden');\n    });\n\n    // Unmark all and mark clicked compcat.\n    if (e) {\n        let items = document.getElementsByClassName('compcat');\n        items.forEach(element => {\n            element.classList.remove('active');\n        });\n        let item = e.target.closest('.compcat');\n        item.classList.add('active');\n    }\n\n    // Special case, unassigned items, show all items without connection to compcat.\n    if (compcat == 'found-items') {\n        let found = document.querySelector('.compcat[data-compcat=\"found-items\"]');\n        if (found.dataset.loneflavors.length) {\n            let flavorsShow = document.querySelectorAll(found.dataset.loneflavors);\n            flavorsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonevariants.length) {\n            let variantsShow = document.querySelectorAll(found.dataset.lonevariants);\n            variantsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonecomponents.length) {\n            let componentsShow = document.querySelectorAll(found.dataset.lonecomponents);\n            componentsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n    }\n}\n\n/**\n * Reload for new items.\n * @param {*} form\n */\nfunction reloadIfNew(form) {\n    // Newly created element without id?\n    if (!form.elements['id'].value) {\n        // Reload page with active compcat.\n        const compcat = document.querySelector('.compcat.active');\n        const currentUrl = new URL(window.location.href);\n        currentUrl.searchParams.set('compcat', compcat.dataset.compcat);\n        window.location.href = currentUrl.toString();\n    }\n}\n"],"names":["PreviewModal","Modal","configure","modalConfig","removeOnClose","large","showModal","e","id","table","title","preventDefault","modalForm","ModalForm","formClass","args","addEventListener","events","FORM_SUBMITTED","form","elements","value","compcat","document","querySelector","currentUrl","URL","window","location","href","searchParams","set","dataset","toString","reloadIfNew","getFormNode","show","async","getElementById","reload","importModal","getElementsByClassName","forEach","element","then","deleteItem","link","closest","remove","error","catch","deleteModal","preview","target","create","templateContext","component","flavors","trim","split","previewModal","showItems","compflavorModal","querySelectorAll","click","params","compcatactive","classList","add","methodname","itemsShow","usedFlavors","includes","length","push","flavorstring","map","item","join","found","loneflavors","lonevariants","lonecomponents"],"mappings":"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"}