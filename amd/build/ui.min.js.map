{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny C4L UI.\n *\n * @module      tiny_c4l/ui\n * @copyright   2022 Marc Catal√† <reskit@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {component} from './common';\nimport C4LModal from './modal';\nimport ModalFactory from 'core/modal_factory';\nimport {get_strings as getStrings} from 'core/str';\nimport {\n    isStudent,\n    showPreview\n} from './options';\nimport ModalEvents from 'core/modal_events';\nimport {\n    addVariant,\n    getVariantsClass,\n    getVariantHtml,\n    getVariantPreferences,\n    getVariantsHtml,\n    loadVariantPreferences,\n    removeVariant,\n    setFlavors,\n    setVariants,\n    variantExists,\n    setComponents\n} from './variantslib';\nimport {\n    findByName\n} from './helper';\nimport {\n    savePreferences,\n    loadPreferences,\n    Preferences\n} from './preferencelib';\nimport {call as fetchMany} from 'core/ajax';\n\nlet userStudent = false;\n\nlet previewC4L = true;\nlet components = [];\nlet categories = [];\nlet flavors = [];\nlet variants = [];\nlet langStrings = {};\nlet contextid = 1;\n\nlet currentFlavor = '';\nlet currentFlavorId = 0;\nlet currentCategoryId = 1;\nlet lastFlavor = [];\n\n/**\n * Handle action\n *\n * @param {TinyMCE} editor\n */\nexport const handleAction = async(editor) => {\n    userStudent = isStudent(editor);\n    let data = await getC4LData();\n    components = data.components;\n    categories = data.categories;\n    flavors = data.flavors;\n    variants = data.variants;\n    setComponents(components);\n    setVariants(variants);\n    setFlavors(flavors);\n    previewC4L = showPreview(editor);\n    langStrings = await getAllStrings();\n    currentCategoryId = await loadPreferences(Preferences.category);\n    lastFlavor = await loadPreferences(Preferences.category_flavors);\n    if (lastFlavor === null) {\n        lastFlavor = [];\n    }\n    let component_variants = await loadPreferences(Preferences.component_variants);\n    if (component_variants === null) {\n        component_variants = {};\n    }\n    loadVariantPreferences(component_variants);\n    displayDialogue(editor);\n};\n\n/**\n * Display modal\n *\n * @param  {TinyMCE} editor\n */\nconst displayDialogue = async(editor) => {\n    const data = Object.assign({}, {});\n    const templateContext = await getTemplateContext(editor, data);\n    // Show modal with buttons.\n    const modal = await ModalFactory.create({\n        type: C4LModal.TYPE,\n        templateContext: templateContext,\n        large: true,\n    });\n\n    // Set modal size when no preview.\n    if (!previewC4L) {\n        editor.targetElm.closest('body').classList.add('c4l-modal-no-preview');\n    }\n    modal.show();\n\n    // Event modal listener.\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        handleModalHidden(editor);\n    });\n\n    // Event filters listener.\n    const filters = modal.getRoot()[0].querySelectorAll('.c4l-button-filter');\n    filters.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleButtonFilterClick(event, modal);\n        });\n    });\n\n    // Event flavor selector listener.\n    const flavorbuttons = modal.getRoot()[0].querySelectorAll('.c4l-button-flavor');\n    flavorbuttons.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleButtonFlavorClick(event, modal);\n        });\n    });\n\n    // Event buttons listeners.\n    const buttons = modal.getRoot()[0].querySelectorAll('.c4lt-dialog-button');\n    buttons.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleButtonClick(event, editor, modal);\n        });\n        if (previewC4L) {\n            node.addEventListener('mouseenter', (event) => {\n                handleButtonMouseEvent(event, modal, true);\n            });\n            node.addEventListener('mouseleave', (event) => {\n                handleButtonMouseEvent(event, modal, false);\n            });\n        }\n    });\n\n    // Event variants listeners.\n    const variants = modal.getRoot()[0].querySelectorAll('.c4l-button-variant');\n    variants.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleVariantClick(event, modal);\n        });\n    });\n\n    if (filters.length > 0) {\n        let savedCategory = currentCategoryId;\n        filters[0].click();\n        if (savedCategory != 0) {\n            filters.forEach((filter) => {\n                if (filter.dataset.filter == savedCategory) {\n                    filter.click();\n                }\n            });\n        }\n    }\n\n    clickFlavor(modal, lastFlavor[currentCategoryId] ? lastFlavor[currentCategoryId] : 0);\n};\n\n/**\n * Handle a click within filter button.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleButtonFilterClick = (event, modal) => {\n    const button = event.target.closest('button');\n    currentCategoryId = button.dataset.filter;\n\n    const buttons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-filters button');\n    buttons.forEach(node => node.classList.remove('c4l-button-filter-enabled'));\n    button.classList.add('c4l-button-filter-enabled');\n\n    showFlavors(modal, currentCategoryId);\n\n    // Show/hide component buttons.\n    showCategoryButtons(modal, currentCategoryId);\n\n    clickFlavor(modal, lastFlavor[currentCategoryId] ? lastFlavor[currentCategoryId] : 0);\n};\n\nconst clickFlavor = (modal, flavor = 0) => {\n    if (flavor == 0) {\n        let availableFlavors = modal.getRoot()[0].querySelectorAll('.c4l-button-flavor:not(.c4l-hidden)');\n        if (availableFlavors.length > 0) {\n            availableFlavors[0].click();\n        } else {\n            let componentButtons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-preview button');\n            componentButtons.forEach(componentButton => {\n                if (componentButton.dataset.flavor != undefined) {\n                    componentButton.classList.remove(componentButton.dataset.flavor);\n                    componentButton.removeAttribute('data-flavor');\n                }\n            });\n        }\n        return;\n    }\n\n    let flavorButtons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-flavors button');\n    flavorButtons.forEach(node => {\n        if (node.dataset.id == flavor) {\n            node.click();\n        }\n    });\n};\n\nconst showFlavors = (modal, categoryId) => {\n    const flavorButtons = modal.getRoot()[0].querySelectorAll('.c4l-button-flavor');\n    flavorButtons.forEach(node => {\n        node.classList.remove('c4l-button-flavor-enabled');\n        let categories = node.dataset.categories.split(',');\n        if (categories.length == 0 || categories.includes(categoryId)) {\n            node.classList.remove('c4l-hidden');\n        } else {\n            node.classList.add('c4l-hidden');\n        }\n    });\n};\n\nconst handleButtonFlavorClick = (event, modal) => {\n    const button = event.target.closest('button');\n    currentFlavor = button.dataset.flavor;\n    currentFlavorId = button.dataset.id;\n    lastFlavor[currentCategoryId] = currentFlavorId;\n\n    const buttons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-flavors button');\n    buttons.forEach(node => node.classList.remove('c4l-button-flavor-enabled'));\n    button.classList.add('c4l-button-flavor-enabled');\n    const componentButtons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-preview button');\n\n    componentButtons.forEach(componentButton => {\n        // Remove previous flavor.\n        if (componentButton.dataset.flavor != undefined) {\n            componentButton.classList.remove(componentButton.dataset.flavor);\n        }\n        componentButton.classList.add(currentFlavor);\n        componentButton.dataset.flavor = currentFlavor;\n        if (\n            (componentButton.dataset.flavorlist == '' || componentButton.dataset.flavorlist.split(',').includes(currentFlavor)) &&\n            componentButton.dataset.category == currentCategoryId\n        ) {\n            componentButton.classList.remove('c4l-hidden');\n            if (componentButton.dataset.flavorlist != '') {\n                let variants = getVariantsClass(components[componentButton.dataset.id].name, currentFlavor);\n                let availableVariants = componentButton.querySelectorAll('.c4l-button-variant');\n                availableVariants.forEach((variant) => {\n                    if (variants.indexOf(variant.dataset.variant) != -1) {\n                        updateVariantButtonState(variant, true);\n                    } else {\n                        updateVariantButtonState(variant, false);\n                    }\n                });\n            }\n        } else {\n            componentButton.classList.add('c4l-hidden');\n        }\n    });\n\n};\n\n/**\n * Handle when closing the Modal.\n *\n * @param {obj} editor\n */\nconst handleModalHidden = (editor) => {\n    editor.targetElm.closest('body').classList.remove('c4l-modal-no-preview');\n    savePreferences([\n        {type: Preferences.category, value: currentCategoryId},\n        {type: Preferences.category_flavors, value: JSON.stringify(lastFlavor)},\n        {type: Preferences.component_variants, value: JSON.stringify(getVariantPreferences())}\n    ]);\n};\n\nconst updateComponentCode = (componentCode, selectedButton, placeholder, flavor = '') => {\n    componentCode = componentCode.replace('{{PLACEHOLDER}}', placeholder);\n\n    // Return active variants for current component.\n    const variants = getVariantsClass(components[selectedButton].name, flavor);\n\n    // Apply variants to html component.\n    if (variants.length > 0) {\n        componentCode = componentCode.replace('{{VARIANTS}}', variants.join(' '));\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', getVariantsHtml(components[selectedButton].name));\n    } else {\n        componentCode = componentCode.replace('{{VARIANTS}}', '');\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', '');\n    }\n\n    if (currentFlavor) {\n        componentCode = componentCode.replace('{{FLAVOR}}', currentFlavor);\n    } else {\n        componentCode = componentCode.replace('{{FLAVOR}}', '');\n    }\n\n    componentCode = componentCode.replace('{{COMPONENT}}', components[selectedButton].name);\n    componentCode = componentCode.replace('{{CATEGORY}}', categories[currentCategoryId].name);\n\n    // Apply random IDs.\n    componentCode = applyRandomID(componentCode);\n\n    // Apply lang strings.\n    componentCode = applyLangStrings(componentCode);\n\n    return componentCode;\n};\n\n/**\n * Handle a click in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} editor\n * @param {obj} modal\n */\nconst handleButtonClick = async (event, editor, modal) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n\n    // Component button.\n    if (components[selectedButton]) {\n        const sel = editor.selection.getContent();\n        let componentCode = components[selectedButton].code;\n        const placeholder = (sel.length > 0 ? sel : components[selectedButton].text);\n\n        let flavor = components[selectedButton].flavors.length > 0 ? currentFlavor : '';\n\n        // Create a new node to replace the placeholder.\n        const randomId = generateRandomID();\n        const newNode = document.createElement('span');\n        newNode.dataset.id = randomId;\n        newNode.innerHTML = placeholder;\n        componentCode = updateComponentCode(componentCode, selectedButton, newNode.outerHTML, flavor);\n        // Sets new content.\n        editor.selection.setContent(componentCode);\n\n        // Select text.\n        const nodeSel = editor.dom.select('span[data-id=\"' + randomId + '\"]');\n        if (nodeSel?.[0]) {\n            editor.selection.select(nodeSel[0]);\n        }\n\n        modal.destroy();\n        editor.focus();\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} modal\n * @param {bool} show\n */\nconst handleButtonMouseEvent = (event, modal, show) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + selectedButton + '\"]');\n    const previewDefault = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-default\"]');\n    let flavor = components[selectedButton].flavors.length > 0 ? currentFlavor : '';\n\n    node.innerHTML = updateComponentCode(components[selectedButton].code, selectedButton, components[selectedButton].text, flavor);\n\n    if (node) {\n        if (show) {\n            previewDefault.classList.toggle('c4l-hidden');\n            node.classList.toggle('c4l-hidden');\n        } else {\n            node.classList.toggle('c4l-hidden');\n            previewDefault.classList.toggle('c4l-hidden');\n        }\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a variant button.\n * Not used at the moment.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n * @param {bool} show\n */\n// eslint-disable-next-line no-unused-vars\nconst handleVariantMouseEvent = (event, modal, show) => {\n    const variant = event.target.closest('span');\n    const variantEnabled = variant.dataset.state == 'on';\n    const button = event.target.closest('button');\n\n    if (!variantEnabled) {\n        updateVariantComponentState(variant, button, modal, show, false);\n    }\n};\n\n\n/**\n * Handle a mouse event within the variant buttons.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n */\nconst handleVariantClick = (event, modal) => {\n    event.stopPropagation();\n    const variant = event.target.closest('span');\n    const button = event.target.closest('button');\n    const flavor = components[button.dataset.id].flavors.length > 0 ? currentFlavor : '';\n\n    updateVariantComponentState(variant, button, modal, false, true);\n\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"]');\n    node.innerHTML = updateComponentCode(\n        components[button.dataset.id].code,\n        button.dataset.id,\n        components[button.dataset.id].text,\n        flavor\n    );\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = async(editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n        buttons: await getButtons(editor),\n        filters: await getFilters(),\n        flavors: flavors,\n        preview: previewC4L,\n    }, data);\n};\n\n/**\n * Get the C4L filters for the dialogue.\n *\n * @returns {object} data\n */\nconst getFilters = async() => {\n    const filters = [];\n    //const stringValues = await getStrings(Contexts.map((key) => ({key, component})));\n    // Iterate over contexts.\n    categories.forEach((category) => {\n        filters.push({\n            id: category.id,\n            name: category.displayname,\n            type: category.id,\n            filterClass: category.order === 1 ? 'c4l-button-filter-enabled' : '',\n            displayorder: category.displayorder,\n        });\n    });\n    filters.sort((a, b) => a.displayorder - b.displayorder);\n\n    return filters;\n};\n\nconst getComponentVariants = (component) => {\n    const componentVariants = [];\n    component.variants.forEach(variant => {\n        let variantitem = findByName(variants, variant);\n        if (variantitem !== undefined) {\n            let state = variantExists(component.name, variantitem.name) ? 'on' : 'off';\n            componentVariants.push({\n                id: variantitem.id,\n                name: variantitem.name,\n                state: state,\n                imageClass: variantitem.name + '-variant-' + state,\n                title: langStrings.get(variantitem.name),\n                content: variantitem.content,\n            });\n        }\n    });\n    return componentVariants;\n};\n\n/**\n * Get the C4L buttons for the dialogue.\n *\n * @param {Editor} editor\n * @returns {object} buttons\n */\nconst getButtons = async(editor) => {\n    const buttons = [];\n    // Not used at the moment.\n    // eslint-disable-next-line no-unused-vars\n    const sel = editor.selection.getContent();\n    Object.values(components).forEach(component => {\n        buttons.push({\n            id: component.id,\n            name: component.displayname,\n            type: component.compcat,\n            imageClass: 'c4l-' + component.name + '-icon',\n            htmlcode: component.code,\n            variants: getComponentVariants(component, variants),\n            flavorlist: component.flavors.join(','),\n            category: component.compcat,\n        });\n    });\n    buttons.sort((a, b) => a.displayorder - b.displayorder);\n\n    return buttons;\n};\n\nconst getC4LData = async() => {\n    const data = await fetchMany([{\n        methodname: 'tiny_c4l_get_c4l_data',\n        args: {\n            isstudent: userStudent,\n            contextid: contextid\n        },\n    }])[0];\n\n    // TODO error handling\n    const indexedComponents = [];\n    data.components.forEach(component => {\n        indexedComponents[component.id] = component;\n    });\n\n    const indexedVariants = [];\n    data.variants.forEach(variant => {\n        indexedVariants[variant.id] = variant;\n    });\n\n    const indexedCategories = [];\n    data.categories.forEach(category => {\n        indexedCategories[category.id] = category;\n    });\n\n    return {\n        components: indexedComponents,\n        variants: indexedVariants,\n        categories: indexedCategories,\n        flavors: data.flavors,\n    };\n};\n\n/**\n * Get variants for the dialogue.\n * Not used at the moment.\n *\n * @param  {string} component\n * @param  {object} elements\n * @return {object} Variants for a component\n */\n// eslint-disable-next-line no-unused-vars\nconst getVariantsState = (component, elements) => {\n    const variants = [];\n    let variantState = '';\n    let variantClass = '';\n\n    // Max 3 variants.\n    if (elements.length > 3) {\n        elements = elements.slice(0, 2);\n    }\n\n    elements.forEach((variant, index) => {\n        if (variantExists(component, variant)) {\n            variantState = 'on';\n            variantClass = 'on ';\n        } else {\n            variantState = 'off';\n            variantClass = '';\n        }\n        variantClass += variant + '-variant-' + variantState;\n        variants.push({\n            id: index,\n            name: variant,\n            state: variantState,\n            imageClass: variantClass,\n            title: langStrings.get(variant),\n        });\n    });\n\n    return variants;\n};\n\n/**\n * Update a variant component UI.\n *\n * @param {obj} variant\n * @param {obj} button\n * @param {obj} modal\n * @param {bool} show\n * @param {bool} updateHtml\n */\nconst updateVariantComponentState = (variant, button, modal, show, updateHtml) => {\n    const selectedVariant = 'c4l-' + variant.dataset.variant + '-variant';\n    const selectedButton = button.dataset.id;\n    const componentClass = button.dataset.classcomponent;\n    const previewComponent = modal.getRoot()[0]\n        .querySelector('div[data-id=\"code-preview-' + selectedButton + '\"] .' + componentClass);\n    const variantPreview = modal.getRoot()[0]\n        .querySelector('span[data-id=\"variantHTML-' + selectedButton + '\"]');\n    let variantsHtml = '';\n    let hasflavors = components[selectedButton].flavors.length > 0;\n\n    if (previewComponent) {\n        if (updateHtml) {\n            if (variant.dataset.state == 'on') {\n                removeVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, false);\n                previewComponent.classList.remove(selectedVariant);\n            } else {\n                addVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, true);\n                previewComponent.classList.add(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = getVariantsHtml(components[selectedButton].name);\n            }\n        } else {\n            variantsHtml = getVariantsHtml(components[selectedButton].name);\n            if (show) {\n                previewComponent.classList.add(selectedVariant);\n                variantsHtml += getVariantHtml(variant.dataset.variant);\n            } else {\n                previewComponent.classList.remove(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = variantsHtml;\n            }\n        }\n    } else {\n        // Update variants preferences.\n        if (variant.dataset.state == 'on') {\n            removeVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, false);\n        } else {\n            addVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, true);\n        }\n    }\n};\n\n/**\n * Update a variant button UI.\n *\n * @param {obj} variant\n * @param {bool} activate\n */\nconst updateVariantButtonState = (variant, activate) => {\n    if (activate) {\n        variant.dataset.state = 'on';\n        variant.classList.remove(variant.dataset.variant + '-variant-off');\n        variant.classList.add(variant.dataset.variant + '-variant-on');\n        variant.classList.add('on');\n    } else {\n        variant.dataset.state = 'off';\n        variant.classList.remove(variant.dataset.variant + '-variant-on');\n        variant.classList.add(variant.dataset.variant + '-variant-off');\n        variant.classList.remove('on');\n    }\n};\n\n/**\n * Show/hide buttons depend on selected context.\n *\n * @param  {object} modal\n * @param  {String} context\n */\nconst showCategoryButtons = (modal, context) => {\n    const showNodes = modal.getRoot()[0].querySelectorAll('button[data-type=\"' + context + '\"]');\n    const hideNodes = modal.getRoot()[0].querySelectorAll('button[data-type]:not([data-type=\"' + context + '\"])');\n\n    showNodes.forEach(node => node.classList.remove('c4l-hidden'));\n    hideNodes.forEach(node => node.classList.add('c4l-hidden'));\n};\n\n/**\n * Replace all localized strings.\n *\n * @param  {String} text\n * @return {String} String with lang tags replaced with a localized string.\n */\nconst applyLangStrings = (text) => {\n    const compRegex = /{{#([^}]*)}}/g;\n\n    [...text.matchAll(compRegex)].forEach(strLang => {\n        text = text.replace('{{#' + strLang[1] + '}}', langStrings.get(strLang[1]));\n    });\n\n    return text;\n};\n\n/**\n * Generates a random string.\n * @return {string} A random string\n */\nconst generateRandomID = () => {\n    const timestamp = new Date().getTime();\n    return 'R' + Math.round(Math.random() * 100000) + '-' + timestamp;\n};\n\n/**\n * Replace all ID tags with a random string.\n * @param  {String} text\n * @return {String} String with all ID tags replaced with a random string.\n */\nconst applyRandomID = (text) => {\n    const compRegex = /{{@ID}}/g;\n\n    if (text.match(compRegex)) {\n        text = text.replace(compRegex, generateRandomID());\n    }\n\n    return text;\n};\n\n/**\n * Get language strings.\n *\n * @return {object} Language strings\n */\nconst getAllStrings = async() => {\n    const keys = [];\n    const compRegex = /{{#([^}]*)}}/g;\n\n    components.forEach(element => {\n        // Get lang strings from components.\n        [...element.code.matchAll(compRegex)].forEach(strLang => {\n            if (keys.indexOf(strLang[1]) === -1) {\n                keys.push(strLang[1]);\n            }\n        });\n    });\n\n    const stringValues = await getStrings(keys.map((key) => ({key, component})));\n    return new Map(keys.map((key, index) => ([key, stringValues[index]])));\n};\n"],"names":["userStudent","previewC4L","components","categories","flavors","variants","langStrings","currentFlavor","currentFlavorId","currentCategoryId","lastFlavor","async","editor","data","getC4LData","getAllStrings","Preferences","category","category_flavors","component_variants","displayDialogue","Object","assign","templateContext","getTemplateContext","modal","ModalFactory","create","type","C4LModal","TYPE","large","targetElm","closest","classList","add","show","getRoot","on","ModalEvents","hidden","handleModalHidden","filters","querySelectorAll","forEach","node","addEventListener","event","handleButtonFilterClick","handleButtonFlavorClick","handleButtonClick","handleButtonMouseEvent","handleVariantClick","length","savedCategory","click","filter","dataset","clickFlavor","button","target","remove","showFlavors","showCategoryButtons","flavor","availableFlavors","componentButton","undefined","removeAttribute","flavorButtons","id","categoryId","split","includes","flavorlist","name","variant","indexOf","updateVariantButtonState","value","JSON","stringify","updateComponentCode","componentCode","selectedButton","placeholder","replace","join","applyRandomID","applyLangStrings","sel","selection","getContent","code","text","randomId","generateRandomID","newNode","document","createElement","innerHTML","outerHTML","setContent","nodeSel","dom","select","destroy","focus","querySelector","previewDefault","toggle","stopPropagation","updateVariantComponentState","elementid","buttons","getButtons","getFilters","preview","push","displayname","filterClass","order","displayorder","sort","a","b","getComponentVariants","component","componentVariants","variantitem","state","imageClass","title","get","content","values","compcat","htmlcode","methodname","args","isstudent","contextid","indexedComponents","indexedVariants","indexedCategories","updateHtml","selectedVariant","componentClass","classcomponent","previewComponent","variantPreview","variantsHtml","hasflavors","activate","context","showNodes","hideNodes","matchAll","strLang","timestamp","Date","getTime","Math","round","random","compRegex","match","keys","element","stringValues","map","key","Map","index"],"mappings":"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"}