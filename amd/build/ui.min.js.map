{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny C4L UI.\n *\n * @module      tiny_c4l/ui\n * @copyright   2022 Marc Catal√† <reskit@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {component} from './common';\nimport C4LModal from './modal';\nimport ModalFactory from 'core/modal_factory';\nimport {components as Components} from './components';\nimport {\n    get_strings as getStrings\n} from 'core/str';\nimport {showPreview} from './options';\nimport ModalEvents from 'core/modal_events';\n\nlet previewC4L = true;\nlet Contexts = [];\n\n/**\n * Handle action\n * @param {TinyMCE} editor\n */\nexport const handleAction = (editor) => {\n    previewC4L = showPreview(editor);\n    displayDialogue(editor);\n};\n\n/**\n * Display modal\n * @param  {TinyMCE} editor\n */\nconst displayDialogue = async(editor) => {\n    const data = Object.assign({}, {});\n\n    // Show modal with buttons.\n    const modal = await ModalFactory.create({\n        type: C4LModal.TYPE,\n        templateContext: await getTemplateContext(editor, data),\n        large: true,\n    });\n\n    // Set modal size when no preview.\n    if (!previewC4L) {\n        editor.targetElm.closest('body').classList.add('c4l-modal-no-preview');\n    }\n    modal.show();\n\n    // Event listeners.\n    modal.getRoot()[0].addEventListener('click', (event) => {\n        handleModalClick(event, editor, modal);\n    });\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        handleModalHidden(editor);\n    });\n    if (previewC4L) {\n        modal.getRoot()[0].addEventListener('mouseover', (event) => {\n            handleModalMouseEvent(event, modal, true);\n        });\n        modal.getRoot()[0].addEventListener('mouseout', (event) => {\n            handleModalMouseEvent(event, modal, false);\n        });\n    }\n};\n\n/**\n * Handle when closing the Modal.\n *\n * @param {obj} editor\n */\nconst handleModalHidden = (editor) => {\n    editor.targetElm.closest('body').classList.remove('c4l-modal-no-preview');\n};\n\n/**\n * Handle a click within the Modal.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} editor\n * @param {obj} modal\n */\nconst handleModalClick = (event, editor, modal) => {\n    const button = event.target.closest('button');\n    const select = event.target.closest('select');\n\n    if (button) {\n        const selectedButton = button.dataset.id;\n\n        // Component button.\n        if (Components?.[selectedButton]) {\n            const sel = editor.selection.getContent();\n            let componentCode = Components[selectedButton].code;\n            const placeholder = (sel.length > 0 ? sel : Components[selectedButton].text);\n\n            // Create a new node to replace the placeholder.\n            const timestamp = new Date().getTime();\n            const randomId = Math.round(Math.random() * 100000) + '-' + timestamp;\n            const newNode = document.createElement('span');\n            newNode.dataset.id = randomId;\n            newNode.innerHTML = placeholder;\n            componentCode = componentCode.replace('{{PLACEHOLDER}}', newNode.outerHTML);\n\n            // Sets new content.\n            editor.selection.setContent(componentCode);\n\n            // Select text.\n            const nodeSel = editor.dom.select('span[data-id=\"' + randomId + '\"]');\n            if (nodeSel?.[0]) {\n                editor.selection.select(nodeSel[0]);\n            }\n\n            modal.destroy();\n            editor.focus();\n        } else {\n            const currentContext = button.dataset.filter;\n            // Filter button.\n            if (Contexts.indexOf(currentContext) !== -1) {\n                // Select current button.\n                const buttons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-filters button');\n                buttons.forEach(node => node.classList.remove('c4l-button-filter-enabled'));\n                button.classList.add('c4l-button-filter-enabled');\n\n                // Select current option in select.\n                const select = modal.getRoot()[0].querySelector('.c4l-select-filter');\n                select.selectedIndex = Contexts.indexOf(currentContext);\n\n                // Show/hide component buttons.\n                showContextButtons(modal, currentContext);\n            }\n        }\n    } else if (select) {\n        const currentContext = select.value;\n        if (Contexts.indexOf(currentContext) !== -1) {\n            // Select current button.\n            const buttons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-filters button');\n            buttons.forEach(node => node.classList.remove('c4l-button-filter-enabled'));\n            const button = modal.getRoot()[0].querySelector('.c4l-button-filter[data-filter=\"' + currentContext + '\"]');\n            button.classList.add('c4l-button-filter-enabled');\n\n            // Show/hide component buttons.\n            showContextButtons(modal, currentContext);\n        }\n    }\n};\n\n/**\n * Handle a mouse event within the Modal.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} modal\n * @param {bool} show\n */\nconst handleModalMouseEvent = (event, modal, show) => {\n    const isPreview = event.target.classList.contains('c4l-dialog-button');\n    const button = event.target.closest('button');\n\n    if (isPreview && button) {\n        const selectedButton = button.dataset.id;\n        const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + selectedButton + '\"]');\n        const previewDefault = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-default\"]');\n\n        if (node) {\n            if (show) {\n                previewDefault.classList.toggle('c4l-hidden');\n                node.classList.toggle('c4l-hidden');\n            } else {\n                node.classList.toggle('c4l-hidden');\n                previewDefault.classList.toggle('c4l-hidden');\n            }\n        }\n    }\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = async(editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n        buttons: await getButtons(editor),\n        filters: await getFilters(),\n        preview: previewC4L,\n    }, data);\n};\n\n/**\n * Get the C4L filters for the dialogue.\n *\n * @returns {object} data\n */\nconst getFilters = async() => {\n    const filters = [];\n    const stringValues = await getStrings(Contexts.map((key) => ({key, component})));\n\n    // Iterate over contexts.\n    Contexts.map((context, index) => {\n        filters.push({\n            name: stringValues[index],\n            type: context,\n            filterClass: index === 0 ? 'c4l-button-filter-enabled' : '',\n        });\n    });\n\n    return filters;\n};\n\n/**\n * Get the C4L buttons for the dialogue.\n *\n * @param {Editor} editor\n * @returns {object} data\n */\nconst getButtons = async(editor) => {\n    const buttons = [];\n    const strings = await getAllStrings();\n    const sel = editor.selection.getContent();\n    let componentCode = '';\n    let placeholder = '';\n\n    // Iterate over components.\n    Components.map((component, index) => {\n        if (previewC4L) {\n            placeholder = (sel.length > 0 ? sel : component.text);\n            componentCode = component.code;\n            componentCode = componentCode.replace('{{PLACEHOLDER}}', placeholder);\n        }\n\n        // Save contexts.\n        if (Contexts.indexOf(component.type) === -1) {\n            Contexts.push(component.type);\n        }\n\n        buttons.push({\n            id: index,\n            name: strings.get(component.name),\n            type: component.type,\n            imageClass: component.imageClass,\n            htmlcode: componentCode,\n        });\n\n        // Add class to hide button.\n        if (Contexts.indexOf(component.type) !== 0) {\n            buttons[index].imageClass += ' c4l-hidden';\n        }\n    });\n\n    return buttons;\n};\n\n/**\n * Show/hide buttons depend on selected context.\n * @param  {object} modal\n * @param  {String} context\n */\nconst showContextButtons = (modal, context) => {\n    const showNodes = modal.getRoot()[0].querySelectorAll('button[data-type=\"' + context + '\"]');\n    const hideNodes = modal.getRoot()[0].querySelectorAll('button[data-type]:not([data-type=\"' + context + '\"])');\n\n    showNodes.forEach(node => node.classList.remove('c4l-hidden'));\n    hideNodes.forEach(node => node.classList.add('c4l-hidden'));\n};\n\n/**\n * Get language strings.\n *\n * @return {object} Language strings\n */\nconst getAllStrings = async() => {\n    const keys = [];\n\n    Components.map(element => keys.push(element.name));\n\n    const stringValues = await getStrings(keys.map((key) => ({key, component})));\n    return new Map(keys.map((key, index) => ([key, stringValues[index]])));\n};\n"],"names":["previewC4L","Contexts","editor","displayDialogue","data","Object","assign","ModalFactory","C4LModal","TYPE","getTemplateContext","type","templateContext","large","create","modal","targetElm","closest","classList","add","show","getRoot","addEventListener","event","handleModalClick","on","ModalEvents","hidden","handleModalHidden","handleModalMouseEvent","remove","button","target","select","selectedButton","dataset","id","Components","sel","selection","getContent","componentCode","code","placeholder","length","text","timestamp","Date","getTime","randomId","Math","round","random","newNode","document","createElement","innerHTML","replace","outerHTML","setContent","nodeSel","dom","destroy","focus","currentContext","filter","indexOf","querySelectorAll","forEach","node","querySelector","selectedIndex","showContextButtons","value","isPreview","contains","previewDefault","toggle","getButtons","getFilters","elementid","buttons","filters","preview","map","key","component","stringValues","context","index","push","name","filterClass","getAllStrings","strings","get","imageClass","htmlcode","showNodes","hideNodes","keys","element","Map"],"mappings":"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"}