{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny C4L UI.\n *\n * @module      tiny_c4l/ui\n * @copyright   2022 Marc Catal√† <reskit@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {component} from './common';\nimport C4LModal from './modal';\nimport ModalFactory from 'core/modal_factory';\nimport {get_strings as getStrings} from 'core/str';\nimport {\n    isStudent,\n    showPreview\n} from './options';\nimport ModalEvents from 'core/modal_events';\nimport {\n    addVariant,\n    getVariantsClass,\n    getVariantHtml,\n    getVariantPreferences,\n    getVariantsHtml,\n    loadVariantPreferences,\n    removeVariant,\n    setFlavors,\n    setVariants,\n    variantExists,\n    setComponents\n} from './variantslib';\nimport {\n    findByName\n} from './helper';\nimport {\n    savePreferences,\n    loadPreferences,\n    Preferences\n} from './preferencelib';\nimport {call as fetchMany} from 'core/ajax';\n\nlet userStudent = false;\n\nlet previewC4L = true;\nlet components = [];\nlet categories = [];\nlet flavors = [];\nlet variants = [];\nlet langStrings = {};\nlet contextid = 1;\n\nlet currentFlavor = '';\nlet currentFlavorId = 0;\nlet currentCategoryId = 1;\nlet lastFlavor = [];\n\n/**\n * Handle action\n *\n * @param {TinyMCE} editor\n */\nexport const handleAction = async(editor) => {\n    userStudent = isStudent(editor);\n    let data = await getC4LData();\n    components = data.components;\n    categories = data.categories;\n    flavors = data.flavors;\n    variants = data.variants;\n    setComponents(components);\n    setVariants(variants);\n    setFlavors(flavors);\n    previewC4L = showPreview(editor);\n    langStrings = await getAllStrings();\n    currentCategoryId = await loadPreferences(Preferences.category);\n    lastFlavor = await loadPreferences(Preferences.category_flavors);\n    if (lastFlavor === null) {\n        lastFlavor = [];\n    }\n    let componentVariants = await loadPreferences(Preferences.component_variants);\n    if (componentVariants === null) {\n        componentVariants = {};\n    }\n    loadVariantPreferences(componentVariants);\n    displayDialogue(editor);\n};\n\n/**\n * Display modal\n *\n * @param  {TinyMCE} editor\n */\nconst displayDialogue = async(editor) => {\n    const data = Object.assign({}, {});\n    const templateContext = await getTemplateContext(editor, data);\n    // Show modal with buttons.\n    const modal = await ModalFactory.create({\n        type: C4LModal.TYPE,\n        templateContext: templateContext,\n        large: true,\n    });\n\n    // Set modal size when no preview.\n    if (!previewC4L) {\n        editor.targetElm.closest('body').classList.add('c4l-modal-no-preview');\n    }\n    modal.show();\n\n    // Event modal listener.\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        handleModalHidden(editor);\n    });\n\n    // Event listener for categories without flavors.\n    const categories = modal.getRoot()[0].querySelectorAll('.c4l-category.no-flavors');\n    categories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryClick(event, modal);\n        });\n    });\n\n    // Event listener for categories with flavors.\n    const selectCategories = modal.getRoot()[0].querySelectorAll('.c4l-category-flavor');\n    selectCategories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryFlavorClick(event, modal);\n        });\n    });\n\n    // Event buttons listeners.\n    const buttons = modal.getRoot()[0].querySelectorAll('.c4lt-dialog-button');\n    buttons.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleButtonClick(event, editor, modal);\n        });\n        if (previewC4L) {\n            node.addEventListener('mouseenter', (event) => {\n                handleButtonMouseEvent(event, modal, true);\n            });\n            node.addEventListener('mouseleave', (event) => {\n                handleButtonMouseEvent(event, modal, false);\n            });\n        }\n    });\n\n    // Event variants listeners.\n    const variants = modal.getRoot()[0].querySelectorAll('.c4l-button-variant');\n    variants.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleVariantClick(event, modal);\n        });\n    });\n\n    if (categories.length > 0) {\n        let savedCategory = currentCategoryId;\n        categories[0].click();\n        if (savedCategory != 0) {\n            categories.forEach((filter) => {\n                if (filter.dataset.filter == savedCategory) {\n                    filter.click();\n                }\n            });\n        }\n    }\n\n    clickFlavor(modal, lastFlavor[currentCategoryId] ? lastFlavor[currentCategoryId] : 0);\n};\n\n/**\n * Handle a click within filter button.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryClick = (event, modal) => {\n    const link = event.target;\n    currentCategoryId = link.dataset.categoryid;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n\n    showFlavors(modal, currentCategoryId);\n\n    // Show/hide component buttons.\n    showCategoryButtons(modal, currentCategoryId);\n\n    clickFlavor(modal, lastFlavor[currentCategoryId] ? lastFlavor[currentCategoryId] : 0);\n};\n\nconst clickFlavor = (modal, flavor = 0) => {\n    if (flavor == 0) {\n        let availableFlavors = modal.getRoot()[0].querySelectorAll('.c4l-button-flavor:not(.c4l-hidden)');\n        if (availableFlavors.length > 0) {\n            availableFlavors[0].click();\n        } else {\n            let componentButtons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-preview button');\n            componentButtons.forEach(componentButton => {\n                if (componentButton.dataset.flavor != undefined) {\n                    componentButton.classList.remove(componentButton.dataset.flavor);\n                    componentButton.removeAttribute('data-flavor');\n                }\n            });\n        }\n        return;\n    }\n};\n\nconst showFlavors = (modal, categoryId) => {\n    const flavorButtons = modal.getRoot()[0].querySelectorAll('.c4l-button-flavor');\n    flavorButtons.forEach(node => {\n        node.classList.remove('c4l-button-flavor-enabled');\n        let categories = node.dataset.categories.split(',');\n        if (categories.length == 0 || categories.includes(categoryId)) {\n            node.classList.remove('c4l-hidden');\n        } else {\n            node.classList.add('c4l-hidden');\n        }\n    });\n};\n\nconst handleCategoryFlavorClick = (event, modal) => {\n    const link = event.target;\n    currentFlavor = link.dataset.flavor;\n    currentFlavorId = link.dataset.id;\n    currentCategoryId = link.dataset.categoryid;\n    lastFlavor[currentCategoryId] = currentFlavorId;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n    const category = modal.getRoot()[0].querySelector('.nav-link[data-categoryid=\"' + currentCategoryId + '\"]');\n    category.classList.add('active');\n\n    const componentButtons = modal.getRoot()[0].querySelectorAll('.c4l-buttons-preview button');\n    componentButtons.forEach(componentButton => {\n        // Remove previous flavor.\n        if (componentButton.dataset.flavor != undefined) {\n            componentButton.classList.remove(componentButton.dataset.flavor);\n        }\n        componentButton.classList.add(currentFlavor);\n        componentButton.dataset.flavor = currentFlavor;\n        if (\n            (componentButton.dataset.flavorlist == '' || componentButton.dataset.flavorlist.split(',').includes(currentFlavor)) &&\n            componentButton.dataset.category == currentCategoryId\n        ) {\n            componentButton.classList.remove('c4l-hidden');\n            if (componentButton.dataset.flavorlist != '') {\n                let variants = getVariantsClass(components[componentButton.dataset.id].name, currentFlavor);\n                let availableVariants = componentButton.querySelectorAll('.c4l-button-variant');\n                availableVariants.forEach((variant) => {\n                    if (variants.indexOf('c4l-' + variant.dataset.variant + '-variant') != -1) {\n                        updateVariantButtonState(variant, true);\n                    } else {\n                        updateVariantButtonState(variant, false);\n                    }\n                });\n            }\n        } else {\n            componentButton.classList.add('c4l-hidden');\n        }\n    });\n\n};\n\n/**\n * Handle when closing the Modal.\n *\n * @param {obj} editor\n */\nconst handleModalHidden = (editor) => {\n    editor.targetElm.closest('body').classList.remove('c4l-modal-no-preview');\n    savePreferences([\n        {type: Preferences.category, value: currentCategoryId},\n        {type: Preferences.category_flavors, value: JSON.stringify(lastFlavor)},\n        {type: Preferences.component_variants, value: JSON.stringify(getVariantPreferences())}\n    ]);\n};\n\nconst updateComponentCode = (componentCode, selectedButton, placeholder, flavor = '') => {\n    componentCode = componentCode.replace('{{PLACEHOLDER}}', placeholder);\n\n    // Return active variants for current component.\n    const variants = getVariantsClass(components[selectedButton].name, flavor);\n\n    // Apply variants to html component.\n    if (variants.length > 0) {\n        componentCode = componentCode.replace('{{VARIANTS}}', variants.join(' '));\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', getVariantsHtml(components[selectedButton].name));\n    } else {\n        componentCode = componentCode.replace('{{VARIANTS}}', '');\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', '');\n    }\n\n    if (currentFlavor) {\n        componentCode = componentCode.replace('{{FLAVOR}}', currentFlavor);\n    } else {\n        componentCode = componentCode.replace('{{FLAVOR}}', '');\n    }\n\n    componentCode = componentCode.replace('{{COMPONENT}}', components[selectedButton].name);\n    componentCode = componentCode.replace('{{CATEGORY}}', categories[currentCategoryId].name);\n\n    // Apply random IDs.\n    componentCode = applyRandomID(componentCode);\n\n    // Apply lang strings.\n    componentCode = applyLangStrings(componentCode);\n\n    return componentCode;\n};\n\n/**\n * Handle a click in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} editor\n * @param {obj} modal\n */\nconst handleButtonClick = async (event, editor, modal) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n\n    // Component button.\n    if (components[selectedButton]) {\n        const sel = editor.selection.getContent();\n        let componentCode = components[selectedButton].code;\n        const placeholder = (sel.length > 0 ? sel : components[selectedButton].text);\n\n        let flavor = components[selectedButton].flavors.length > 0 ? currentFlavor : '';\n\n        // Create a new node to replace the placeholder.\n        const randomId = generateRandomID();\n        const newNode = document.createElement('span');\n        newNode.dataset.id = randomId;\n        newNode.innerHTML = placeholder;\n        componentCode = updateComponentCode(componentCode, selectedButton, newNode.outerHTML, flavor);\n        // Sets new content.\n        editor.selection.setContent(componentCode);\n\n        // Select text.\n        const nodeSel = editor.dom.select('span[data-id=\"' + randomId + '\"]');\n        if (nodeSel?.[0]) {\n            editor.selection.select(nodeSel[0]);\n        }\n\n        modal.destroy();\n        editor.focus();\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} modal\n * @param {bool} show\n */\nconst handleButtonMouseEvent = (event, modal, show) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + selectedButton + '\"]');\n    const previewDefault = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-default\"]');\n    let flavor = components[selectedButton].flavors.length > 0 ? currentFlavor : '';\n\n    node.innerHTML = updateComponentCode(components[selectedButton].code, selectedButton, components[selectedButton].text, flavor);\n\n    if (node) {\n        if (show) {\n            previewDefault.classList.toggle('c4l-hidden');\n            node.classList.toggle('c4l-hidden');\n        } else {\n            node.classList.toggle('c4l-hidden');\n            previewDefault.classList.toggle('c4l-hidden');\n        }\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a variant button.\n * Not used at the moment.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n * @param {bool} show\n */\n// eslint-disable-next-line no-unused-vars\nconst handleVariantMouseEvent = (event, modal, show) => {\n    const variant = event.target.closest('span');\n    const variantEnabled = variant.dataset.state == 'on';\n    const button = event.target.closest('button');\n\n    if (!variantEnabled) {\n        updateVariantComponentState(variant, button, modal, show, false);\n    }\n};\n\n\n/**\n * Handle a mouse event within the variant buttons.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n */\nconst handleVariantClick = (event, modal) => {\n    event.stopPropagation();\n    const variant = event.target.closest('span');\n    const button = event.target.closest('button');\n    const flavor = components[button.dataset.id].flavors.length > 0 ? currentFlavor : '';\n\n    updateVariantComponentState(variant, button, modal, false, true);\n\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"]');\n    node.innerHTML = updateComponentCode(\n        components[button.dataset.id].code,\n        button.dataset.id,\n        components[button.dataset.id].text,\n        flavor\n    );\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = async(editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n        buttons: await getButtons(editor),\n        filters: await getFilters(),\n        flavors: flavors,\n        preview: previewC4L,\n    }, data);\n};\n\n/**\n * Get the C4L filters for the dialogue.\n *\n * @returns {object} data\n */\nconst getFilters = async() => {\n    const filters = [];\n    //const stringValues = await getStrings(Contexts.map((key) => ({key, component})));\n    // Iterate over contexts.\n    categories.forEach((category) => {\n        let categoryFlavors = getCategoryFlavors(category.id);\n        let hasFlavors = hasCategoryFlavors(categoryFlavors);\n        filters.push({\n            categoryid: category.id,\n            name: category.displayname,\n            type: category.id,\n            displayorder: category.displayorder,\n            flavors: categoryFlavors,\n            hasFlavors: hasFlavors,\n            active: '',\n        });\n    });\n    // Sort by displayorder and set first to active.\n    filters.sort((a, b) => a.displayorder - b.displayorder);\n    filters[0].active = 'active';\n    if (filters[0].flavors.length > 0) {\n        filters[0].flavors[0].factive = 'active';\n    }\n\n    return filters;\n};\n\nconst getComponentVariants = (component) => {\n    const componentVariants = [];\n    component.variants.forEach(variant => {\n        let variantitem = findByName(variants, variant);\n        if (variantitem !== undefined) {\n            let state = variantExists(component.name, variantitem.name) ? 'on' : 'off';\n            componentVariants.push({\n                id: variantitem.id,\n                name: variantitem.name,\n                state: state,\n                imageClass: variantitem.name + '-variant-' + state,\n                title: langStrings.get(variantitem.name),\n                content: variantitem.content,\n            });\n        }\n    });\n    return componentVariants;\n};\n\nconst getCategoryFlavors = (categoryId) => {\n    const categoryFlavors = [];\n    flavors.forEach(flavor => {\n        if (flavor.categories == categoryId) {\n            categoryFlavors.push({\n                id: flavor.id,\n                name: flavor.name,\n                displayname: flavor.displayname,\n            });\n        }\n    });\n    return categoryFlavors;\n};\n\nconst hasCategoryFlavors = (value) => {\n    return Array.isArray(value) && value.length;\n};\n\n/**\n * Get the C4L buttons for the dialogue.\n *\n * @param {Editor} editor\n * @returns {object} buttons\n */\nconst getButtons = async(editor) => {\n    const buttons = [];\n    // Not used at the moment.\n    // eslint-disable-next-line no-unused-vars\n    const sel = editor.selection.getContent();\n    Object.values(components).forEach(component => {\n        buttons.push({\n            id: component.id,\n            name: component.displayname,\n            type: component.compcat,\n            imageClass: 'c4l-' + component.name + '-icon',\n            htmlcode: component.code,\n            variants: getComponentVariants(component, variants),\n            flavorlist: component.flavors.join(','),\n            category: component.compcat,\n        });\n    });\n    buttons.sort((a, b) => a.displayorder - b.displayorder);\n\n    return buttons;\n};\n\nconst getC4LData = async() => {\n    const data = await fetchMany([{\n        methodname: 'tiny_c4l_get_c4l_data',\n        args: {\n            isstudent: userStudent,\n            contextid: contextid\n        },\n    }])[0];\n\n    // TODO error handling\n    const indexedComponents = [];\n    data.components.forEach(component => {\n        indexedComponents[component.id] = component;\n    });\n\n    const indexedVariants = [];\n    data.variants.forEach(variant => {\n        indexedVariants[variant.id] = variant;\n    });\n\n    const indexedCategories = [];\n    data.categories.forEach(category => {\n        indexedCategories[category.id] = category;\n    });\n\n    return {\n        components: indexedComponents,\n        variants: indexedVariants,\n        categories: indexedCategories,\n        flavors: data.flavors,\n    };\n};\n\n/**\n * Get variants for the dialogue.\n * Not used at the moment.\n *\n * @param  {string} component\n * @param  {object} elements\n * @return {object} Variants for a component\n */\n// eslint-disable-next-line no-unused-vars\nconst getVariantsState = (component, elements) => {\n    const variants = [];\n    let variantState = '';\n    let variantClass = '';\n\n    // Max 3 variants.\n    if (elements.length > 3) {\n        elements = elements.slice(0, 2);\n    }\n\n    elements.forEach((variant, index) => {\n        if (variantExists(component, variant)) {\n            variantState = 'on';\n            variantClass = 'on ';\n        } else {\n            variantState = 'off';\n            variantClass = '';\n        }\n        variantClass += variant + '-variant-' + variantState;\n        variants.push({\n            id: index,\n            name: variant,\n            state: variantState,\n            imageClass: variantClass,\n            title: langStrings.get(variant),\n        });\n    });\n\n    return variants;\n};\n\n/**\n * Update a variant component UI.\n *\n * @param {obj} variant\n * @param {obj} button\n * @param {obj} modal\n * @param {bool} show\n * @param {bool} updateHtml\n */\nconst updateVariantComponentState = (variant, button, modal, show, updateHtml) => {\n    const selectedVariant = 'c4l-' + variant.dataset.variant + '-variant';\n    const selectedButton = button.dataset.id;\n    const componentClass = button.dataset.classcomponent;\n    const previewComponent = modal.getRoot()[0]\n        .querySelector('div[data-id=\"code-preview-' + selectedButton + '\"] .' + componentClass);\n    const variantPreview = modal.getRoot()[0]\n        .querySelector('span[data-id=\"variantHTML-' + selectedButton + '\"]');\n    let variantsHtml = '';\n    let hasflavors = components[selectedButton].flavors.length > 0;\n\n    if (previewComponent) {\n        if (updateHtml) {\n            if (variant.dataset.state == 'on') {\n                removeVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, false);\n                previewComponent.classList.remove(selectedVariant);\n            } else {\n                addVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, true);\n                previewComponent.classList.add(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = getVariantsHtml(components[selectedButton].name);\n            }\n        } else {\n            variantsHtml = getVariantsHtml(components[selectedButton].name);\n            if (show) {\n                previewComponent.classList.add(selectedVariant);\n                variantsHtml += getVariantHtml(variant.dataset.variant);\n            } else {\n                previewComponent.classList.remove(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = variantsHtml;\n            }\n        }\n    } else {\n        // Update variants preferences.\n        if (variant.dataset.state == 'on') {\n            removeVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, false);\n        } else {\n            addVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, true);\n        }\n    }\n};\n\n/**\n * Update a variant button UI.\n *\n * @param {obj} variant\n * @param {bool} activate\n */\nconst updateVariantButtonState = (variant, activate) => {\n    if (activate) {\n        variant.dataset.state = 'on';\n        variant.classList.remove(variant.dataset.variant + '-variant-off');\n        variant.classList.add(variant.dataset.variant + '-variant-on');\n        variant.classList.add('on');\n    } else {\n        variant.dataset.state = 'off';\n        variant.classList.remove(variant.dataset.variant + '-variant-on');\n        variant.classList.add(variant.dataset.variant + '-variant-off');\n        variant.classList.remove('on');\n    }\n};\n\n/**\n * Show/hide buttons depend on selected context.\n *\n * @param  {object} modal\n * @param  {String} context\n */\nconst showCategoryButtons = (modal, context) => {\n    const showNodes = modal.getRoot()[0].querySelectorAll('button[data-type=\"' + context + '\"]');\n    const hideNodes = modal.getRoot()[0].querySelectorAll('button[data-type]:not([data-type=\"' + context + '\"])');\n\n    showNodes.forEach(node => node.classList.remove('c4l-hidden'));\n    hideNodes.forEach(node => node.classList.add('c4l-hidden'));\n};\n\n/**\n * Replace all localized strings.\n *\n * @param  {String} text\n * @return {String} String with lang tags replaced with a localized string.\n */\nconst applyLangStrings = (text) => {\n    const compRegex = /{{#([^}]*)}}/g;\n\n    [...text.matchAll(compRegex)].forEach(strLang => {\n        text = text.replace('{{#' + strLang[1] + '}}', langStrings.get(strLang[1]));\n    });\n\n    return text;\n};\n\n/**\n * Generates a random string.\n * @return {string} A random string\n */\nconst generateRandomID = () => {\n    const timestamp = new Date().getTime();\n    return 'R' + Math.round(Math.random() * 100000) + '-' + timestamp;\n};\n\n/**\n * Replace all ID tags with a random string.\n * @param  {String} text\n * @return {String} String with all ID tags replaced with a random string.\n */\nconst applyRandomID = (text) => {\n    const compRegex = /{{@ID}}/g;\n\n    if (text.match(compRegex)) {\n        text = text.replace(compRegex, generateRandomID());\n    }\n\n    return text;\n};\n\n/**\n * Get language strings.\n *\n * @return {object} Language strings\n */\nconst getAllStrings = async() => {\n    const keys = [];\n    const compRegex = /{{#([^}]*)}}/g;\n\n    components.forEach(element => {\n        // Get lang strings from components.\n        [...element.code.matchAll(compRegex)].forEach(strLang => {\n            if (keys.indexOf(strLang[1]) === -1) {\n                keys.push(strLang[1]);\n            }\n        });\n    });\n\n    const stringValues = await getStrings(keys.map((key) => ({key, component})));\n    return new Map(keys.map((key, index) => ([key, stringValues[index]])));\n};\n"],"names":["userStudent","previewC4L","components","categories","flavors","variants","langStrings","currentFlavor","currentFlavorId","currentCategoryId","lastFlavor","async","editor","data","getC4LData","getAllStrings","Preferences","category","category_flavors","componentVariants","component_variants","displayDialogue","Object","assign","templateContext","getTemplateContext","modal","ModalFactory","create","type","C4LModal","TYPE","large","targetElm","closest","classList","add","show","getRoot","on","ModalEvents","hidden","handleModalHidden","querySelectorAll","forEach","node","addEventListener","event","handleCategoryClick","handleCategoryFlavorClick","handleButtonClick","handleButtonMouseEvent","handleVariantClick","length","savedCategory","click","filter","dataset","clickFlavor","link","target","categoryid","remove","showFlavors","showCategoryButtons","flavor","availableFlavors","componentButton","undefined","removeAttribute","categoryId","split","includes","id","querySelector","flavorlist","name","variant","indexOf","updateVariantButtonState","value","JSON","stringify","updateComponentCode","componentCode","selectedButton","placeholder","replace","join","applyRandomID","applyLangStrings","sel","selection","getContent","code","text","randomId","generateRandomID","newNode","document","createElement","innerHTML","outerHTML","setContent","nodeSel","dom","select","destroy","focus","previewDefault","toggle","stopPropagation","button","updateVariantComponentState","elementid","buttons","getButtons","filters","getFilters","preview","categoryFlavors","getCategoryFlavors","hasFlavors","hasCategoryFlavors","push","displayname","displayorder","active","sort","a","b","factive","getComponentVariants","component","variantitem","state","imageClass","title","get","content","Array","isArray","values","compcat","htmlcode","methodname","args","isstudent","contextid","indexedComponents","indexedVariants","indexedCategories","updateHtml","selectedVariant","componentClass","classcomponent","previewComponent","variantPreview","variantsHtml","hasflavors","activate","context","showNodes","hideNodes","matchAll","strLang","timestamp","Date","getTime","Math","round","random","compRegex","match","keys","element","stringValues","map","key","Map","index"],"mappings":"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"}