{"version":3,"file":"variantslib.min.js","sources":["../src/variantslib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Variants helper for C4L plugin.\n *\n * @module      tiny_c4l/variantslib\n * @copyright   2023 Marc Catal√† <reskit@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport {components as COMPONENTS} from './components';\nimport {variants as VARIANTS} from './variants';\n\nconst variantsPreferenceName = 'c4l_components_variants';\nlet variantPreferences = {};\n\n/**\n * Load user preferences.\n *\n * @returns {Promise}\n */\nexport const loadVariantPreferences = async() => {\n\n    const request = {\n        methodname: 'core_user_get_user_preferences',\n        args: {\n            name: variantsPreferenceName\n        }\n    };\n\n    return Ajax.call([request])[0]\n        .then(result => {\n            let comp = {};\n            let rawPreferences = {};\n            let variantObj = {};\n            try {\n                rawPreferences = JSON.parse(result.preferences[0].value);\n            } catch (e) {\n                Notification.exception(e);\n            }\n\n            if (rawPreferences !== null) {\n                Object.keys(rawPreferences).forEach(preference => {\n                    comp = COMPONENTS.find(component => component.id == preference);\n                    if (comp != undefined) {\n                        variantPreferences[comp.name] = [];\n                        rawPreferences[preference].forEach((variant) => {\n                            variantObj = VARIANTS.find(element => element.id == variant);\n                            if (variantObj != undefined) {\n                                variantPreferences[comp.name].push(variantObj.name);\n                            }\n                        });\n                    }\n                });\n            }\n    }).catch(Notification.exception);\n};\n\n/**\n * Save user preferences.\n *\n * @returns {Promise}\n */\nexport const saveVariantPreferences = () => {\n    let comp = {};\n    let rawPreferences = {};\n    let variantObj = {};\n    Object.keys(variantPreferences).forEach(preference => {\n        comp = COMPONENTS.find(component => component.name == preference);\n        if (comp != undefined) {\n            rawPreferences[comp.id] = [];\n            variantPreferences[preference].forEach((variant) => {\n                variantObj = VARIANTS.find(element => element.name == variant);\n                if (variantObj != undefined) {\n                    rawPreferences[comp.id].push(variantObj.id);\n                }\n            });\n        }\n    });\n\n    const request = {\n        methodname: 'core_user_update_user_preferences',\n        args: {\n            preferences: [\n                {\n                    type: variantsPreferenceName,\n                    value: JSON.stringify(rawPreferences)\n                }\n            ]\n        }\n    };\n\n    return Ajax.call([request])[0].catch(Notification.exception);\n};\n\n\n/**\n * Returns whether a variant exists for a component.\n *\n * @param  {string} component Component name\n * @param  {string} variant   Variant name\n * @returns {bool}\n */\nexport const variantExists = (component, variant) => {\n    return variantPreferences?.[component] && variantPreferences[component].indexOf(variant) !== -1;\n};\n\n/**\n * Returns each variant for a component as a CSS class.\n *\n * @param  {string} component Component name\n * @returns {Array}\n */\nexport const getVariantsClass = (component) => {\n    let variants = [];\n\n    if (variantPreferences?.[component]) {\n        variantPreferences[component].forEach(variant => {\n            variants.push('c4l-' + variant + '-variant');\n        });\n    }\n    return variants;\n};\n\n/**\n * Return all HTML variants for a component.\n *\n * @param  {string} component Component name\n * @returns {string}\n */\nexport const getVariantsHtml = (component) => {\n    let variantsHtml = '';\n    let variantObj = {};\n\n    if (variantPreferences?.[component]) {\n        variantPreferences[component].forEach(variant => {\n            variantObj = VARIANTS.find(element => element.name == variant);\n            if (variantObj != undefined) {\n                variantsHtml += variantObj.html;\n            }\n        });\n    }\n    return variantsHtml;\n};\n\n/**\n * Return the HTML variant.\n *\n * @param  {string} variant Variant name\n * @returns {string}\n */\nexport const getVariantHtml = (variant) => {\n    let variantHtml = [];\n    let variantObj = {};\n\n    variantObj = VARIANTS.find(element => element.name == variant);\n    if (variantObj != undefined) {\n        variantHtml = variantObj.html;\n    }\n    return variantHtml;\n};\n\n/**\n * Add a variant to variantPreferences\n *\n * @param  {string} component Component name\n * @param  {string} variant   Variant name\n */\nexport const addVariant = (component, variant) => {\n    if (!variantPreferences?.[component]) {\n        variantPreferences[component] = [];\n    }\n    if (!variantExists(component, variant)) {\n        variantPreferences[component].push(variant);\n    }\n};\n\n/**\n * Remove a variant from variantPreferences\n *\n * @param  {string} component Component name\n * @param  {string} variant   Variant name\n */\nexport const removeVariant = (component, variant) => {\n    const index = variantPreferences[component].indexOf(variant);\n    if (index !== -1) {\n        delete variantPreferences[component][index];\n    }\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_ajax","_notification","variantPreferences","_exports","loadVariantPreferences","async","request","methodname","args","name","Ajax","call","then","result","comp","rawPreferences","variantObj","JSON","parse","preferences","value","e","Notification","exception","Object","keys","forEach","preference","COMPONENTS","find","component","id","undefined","variant","VARIANTS","element","push","catch","saveVariantPreferences","type","stringify","variantExists","indexOf","getVariantsClass","variants","getVariantsHtml","variantsHtml","html","getVariantHtml","variantHtml","addVariant","removeVariant","index"],"mappings":"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"}